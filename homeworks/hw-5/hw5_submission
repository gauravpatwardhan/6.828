1. Turn on interrups while holding the ide lock. Explain why the kernel panicked.
Ans: Interrups were enabled while the locks were held. 

80104c26	-	enter scheduler
				sched()
					if(cpu->ncli != 1)
						panic("sched locks");
80104cc5	-	release(&ptable,lock) in yield()
80106a5b	-	// Force process to give up CPU on clock tick.
				// If interrupts were on while locks held, would need to check nlock.
				if(proc && proc->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER)
					yield()

80106651 - just before trapret, end of alltraps
801029cd - idestart(b)
801001e7 - iderw(b)
80101398 - b = bread(dev,1)
8010166c - readsb(dev, &sb)
80104d0b - iinit(ROOTDEV)
80106654 - (asm) trapret

2. Explain why didnt the kernel panic when the interrupts were turned on while holding the file_table_lock ?
Ans: Because the file_table_lock is triggered from the kernel whereas in the previous case, the lock was meant for the harddisk interrupt.

3. Why does release() clear lk->pcs[0] and lk->cpu before clearing lk- >locked? Why not wait until after?
Basically we want the instructions to be executed serially in that order.

